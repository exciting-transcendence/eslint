module.exports = {
  env: {
    node: true,
    jest: true,
  },
  globals: {},
  parser:
    '/home/scarf/Repo/transcendence/eslint-config/node_modules/@typescript-eslint/parser/dist/index.js',
  parserOptions: {
    project: '**/tsconfig.json',
    sourceType: 'module',
  },
  plugins: ['react', 'prettier', '@typescript-eslint'],
  rules: {
    'prettier/prettier': ['error'],
    '@typescript-eslint/interface-name-prefix': ['off'],
    '@typescript-eslint/explicit-function-return-type': ['off'],
    '@typescript-eslint/explicit-module-boundary-types': ['off'],
    '@typescript-eslint/no-explicit-any': ['off'],
    eqeqeq: ['error', 'always'],
    semi: ['error', 'never'],
    '@typescript-eslint/member-delimiter-style': [
      'error',
      {
        multiline: {
          delimiter: 'none',
          requireLast: false,
        },
      },
    ],
    '@typescript-eslint/naming-convention': [
      'warn',
      {
        selector: 'default',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
      },
      {
        selector: 'enumMember',
        format: ['UPPER_CASE'],
      },
      {
        selector: ['class'],
        format: ['PascalCase'],
      },
      {
        selector: 'interface',
        format: ['PascalCase'],
        custom: {
          regex: '^I[a-zA-Z]',
          match: false,
        },
      },
      {
        selector: [
          'classProperty',
          'objectLiteralProperty',
          'typeProperty',
          'classMethod',
          'objectLiteralMethod',
          'typeMethod',
          'accessor',
          'enumMember',
        ],
        modifiers: ['requiresQuotes'],
        format: null,
      },
    ],
    '@typescript-eslint/adjacent-overload-signatures': ['error'],
    '@typescript-eslint/ban-ts-comment': ['error'],
    '@typescript-eslint/ban-types': ['error'],
    'no-array-constructor': ['off'],
    '@typescript-eslint/no-array-constructor': ['error'],
    'no-empty-function': ['off'],
    '@typescript-eslint/no-empty-function': ['error'],
    '@typescript-eslint/no-empty-interface': ['error'],
    '@typescript-eslint/no-extra-non-null-assertion': ['error'],
    'no-extra-semi': ['off'],
    '@typescript-eslint/no-extra-semi': ['error'],
    '@typescript-eslint/no-inferrable-types': ['error'],
    'no-loss-of-precision': ['off'],
    '@typescript-eslint/no-loss-of-precision': ['error'],
    '@typescript-eslint/no-misused-new': ['error'],
    '@typescript-eslint/no-namespace': ['error'],
    '@typescript-eslint/no-non-null-asserted-optional-chain': ['error'],
    '@typescript-eslint/no-non-null-assertion': ['warn'],
    '@typescript-eslint/no-this-alias': ['error'],
    '@typescript-eslint/no-unnecessary-type-constraint': ['error'],
    'no-unused-vars': ['off'],
    '@typescript-eslint/no-unused-vars': ['warn'],
    '@typescript-eslint/no-var-requires': ['error'],
    '@typescript-eslint/prefer-as-const': ['error'],
    '@typescript-eslint/prefer-namespace-keyword': ['error'],
    '@typescript-eslint/triple-slash-reference': ['error'],
  },
  settings: {},
  ignorePatterns: [],
}
